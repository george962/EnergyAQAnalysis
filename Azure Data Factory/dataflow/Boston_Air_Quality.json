{
	"name": "Boston_Air_Quality",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Boston_Air_Quality_Sink_Json",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Boston_Air_Quality",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          coord as (lon as double, lat as double),",
				"          list as (main as (aqi as integer), components as (co as double, no as double, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 foldDown(unroll(list),",
				"     mapColumn(",
				"          coord,",
				"          list = list.main.aqi,",
				"          co = list.components.co,",
				"          nh3 = list.components.nh3,",
				"          no = list.components.no,",
				"          no2 = list.components.no2,",
				"          o3 = list.components.o3,",
				"          pm10 = list.components.pm10,",
				"          pm2_5 = list.components.pm2_5,",
				"          so2 = list.components.so2,",
				"          timestamp = list.dt,",
				"          aqi = list.main.aqi",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(corrected_timestamp = iif(length(toString({timestamp})) == 10, toInteger({timestamp}), toInteger(null())),",
				"          location = 'Boston') ~> derivedColumn1",
				"derivedColumn1 filter(!isNull({aqi}) && !isNull(corrected_timestamp)) ~> filter1",
				"filter1 derive(corrected_timestamp = toTimestamp(toLong(corrected_timestamp) * 1000),",
				"          id = concat(location, '_', toString(corrected_timestamp)),",
				"          co = round(co,2),",
				"          nh3 = round(nh3,2),",
				"          no = round(no,2),",
				"          no2 = round(no2,2),",
				"          o3 = round(o3,2),",
				"          pm10 = round(pm10,2),",
				"          pm2_5 = round(pm2_5,2),",
				"          so2 = round(so2,2)) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          coord,",
				"          list,",
				"          co,",
				"          nh3,",
				"          no,",
				"          no2,",
				"          o3,",
				"          pm10,",
				"          pm2_5,",
				"          so2,",
				"          timestamp,",
				"          aqi,",
				"          corrected_timestamp,",
				"          location,",
				"          id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          period as string,",
				"          duoarea as string,",
				"          {area-name} as string,",
				"          product as string,",
				"          {product-name} as string,",
				"          process as string,",
				"          {process-name} as string,",
				"          series as string,",
				"          {series-description} as string,",
				"          value as string,",
				"          units as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}